"use strict";(globalThis.webpackChunkmomentum=globalThis.webpackChunkmomentum||[]).push([[4030],{55774:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var s=n(20144),i=n(50432),d=n(61899),p=n(96046);const a=new(s.ZP.extend({name:"ModalDevPanelManager",data:()=>({experimentMap:(0,d.DV)(),definitions:i.U,pinnedStep:null}),methods:{setStepActive(e,t){m.cmd("modal.open",e,{subStepIndex:t})},setPinnedStepActiveOnDashLoad({stepId:e,subStepIndex:t,experimentId:n,variantId:s}={}){let i;if(n){const t=this.experimentMap[n],d=t&&t.variants[s];i=d&&d.steps[e]}else i=this.definitions[e];i&&(this.toggleStepPinned(i,{stepId:e,subStepIndex:t,experimentId:n,variantId:s}),p.Z.appsReady?this.setStepActive(i,t):m.once("appsReady",(()=>{this.setStepActive(i,t)})))},toggleStepPinned(e,{stepId:t,subStepIndex:n,experimentId:s,variantId:i}={}){const d=localStorage.getObject("dev-panel:pinned-step");d?this.objectsMatch(d,{stepId:t,subStepIndex:n,experimentId:s,variantId:i})?(this.$set(e,"pinned",!e.pinned),this.pinnedStep=e.pinned?e:null,this.updateSubStepIndex(e,e.pinned?n:void 0),null===this.pinnedStep&&m.trigger("modal:close")):this.objectsMatch((({stepId:e,experimentId:t,variantId:n})=>({stepId:e,experimentId:t,variantId:n}))(d),{stepId:t,experimentId:s,variantId:i})?this.updateSubStepIndex(e,n):(this.pinnedStep&&(this.$set(this.pinnedStep,"pinned",!1),this.updateSubStepIndex(this.pinnedStep,void 0)),this.$set(e,"pinned",!0),this.updateSubStepIndex(e,n),this.pinnedStep=e):(this.$set(e,"pinned",!0),this.pinnedStep=e,this.updateSubStepIndex(e,n)),e.pinned?localStorage.setObject("dev-panel:pinned-step",{stepId:t,subStepIndex:n,experimentId:s,variantId:i}):localStorage.removeItem("dev-panel:pinned-step")},updateSubStepIndex(e,t){void 0===t?this.$delete(e,"pinnedSubStepIndex"):this.$set(e,"pinnedSubStepIndex",t)},objectsMatch:(e,t)=>new Array(...new Set([...Object.keys(e),...Object.keys(t)])).every((n=>e[n]===t[n]))}}))},40531:(e,t,n)=>{n.d(t,{Fl:()=>d,Jr:()=>o,ax:()=>a});var s=n(99437);const i=new s.Z.observable({}),d=new Proxy(i,{get:(e,t)=>(e.hasOwnProperty(t)||s.Z.set(e,t,m.models.customization.getComputedSetting(t)),e[t]),set:()=>(console.warn('Computed settings cannot be set by reactiveCustomization. Instead set persistent settings with "persistent"'),!1)}),p=new s.Z.observable({}),a=new Proxy(p,{get:(e,t)=>(e.hasOwnProperty(t)||s.Z.set(e,t,m.models.customization.get(t)),e[t]),set:(e,t,n)=>(m.models.customization.save(t,n),s.Z.set(e,t,n),!0)});function o(e={}){Object.entries(e).forEach((([e,t])=>s.Z.set(p,e,t))),m.models.customization.save(e)}m.models.customization.on("change",(e=>{e&&("balanceModeStr"in e.changed&&Object.entries(m.models.customization.attributes).forEach((([e,t])=>s.Z.set(i,e,t))),Object.entries(e.changed).forEach((([e,t])=>{i[e]=m.models.customization.getComputedSetting(e),s.Z.set(p,e,t)})))})),m.on("customization:update",(e=>{e.forEach((e=>{const t=m.models.customization.getComputedSetting(e);s.Z.set(i,e,t),s.Z.set(p,e,t)}))}))}}]);